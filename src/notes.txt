retrieveTodos = () => {
  axios.get('/todos/show')
    .then(response => {
      this.setState({
      todos: response.data,
    });
    console.log(this.state.todos)
  })
  .catch(error => {
    console.log(error);
  })
}

markAsTrash = (taskId) => {
  axios.put(`http://127.0.0.1:8001/api/todos/${taskId}`)
  .then(response => {
    this.setState({
      tasks: this.state.tasks.filter(task => task.id != taskId)
    })
  })
  .catch(error => {
    alert('Cannnot Mark as Trash')
  })
}


  // markComplete = (taskId) => {
  //   axios.put(`http://127.0.0.1:8001/api/todos/${taskId}`)
  //   .then(response => {
  //     this.setState({
  //       tasks: this.state.tasks.filter(task => task.id != taskId)
  //     })
  //   })
  //   .catch(error => {
  //     alert('Cannnot Mark it as Complete')
  //   })
  // }
--------------------------------------------------------------------------------

 MarkAsComplete - onClick submits updates the DB [0->1],
 Completed page - gets all the DB columns from completed with 1
 markAsComplete - prop

--------------------------------------------------------------------------------


componentDidMount() {
  axios.get('http://127.0.0.1:8001/api/todos')
  .then(result => {
    this.setState({
      todos: result.data,
    })
  })
  .catch(error => {
    console.log('ERROR: ', error)
  })
}

STEPS TO CODE THE APPLICATION
# React CRUD [ create, read, update & delete]
# Each of the pages handles CRUD
# One page to handle PUT(4) and another to handle CREATE
# 4 Link pages using React Router
# [TodoList/Home, TodoCreate, TodoEdit, TodoDelete, TodoShow] = Component/features
# ['/'] [/todos/new] [/todos/edit] [/todos/delete] [/todos/show] = Link Path
# Fetch or Axios to handle the API endpoint call
# data.response.results = view the results
# Style the Application | Take the look and feel of UMAI website
# Test each Component


backend Laravel
[+] = done
# create API - Model, controller and Migrations to handle the POST|GET data to\fro the DB [+]
# create API endpoints in the web/api.php [+]
# test workability using postman [+]
# API able to perform CRUD using postman [+]
# handle CORS using Laravel CORS by Barry
# Run Backend API tests
# ./vendor/bin/phpunit --filter=a_user_can_create_a_todo

Testing
# test the React App


Production
# build the react app
